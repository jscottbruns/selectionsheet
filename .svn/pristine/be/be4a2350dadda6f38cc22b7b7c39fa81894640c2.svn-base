<HTML>
<BODY>
<h1>Name</h1>
<p>image_raw_embed -- embed an image into the PDF</p>
<h1>Synopsis</h1>
<p>int <b>image_raw_embed</b> ( string data, string colorspace, int bitspercolor, int height, int widht[, string filter[, array additional]] )</p>
<h1>Description</h1>
<p>This function is used to insert an image into the PDF
file.</p>
<p><code>data</code> should contain the raw,
binary imagedata.</p>
<p><code>colorspace</code> is a string value used to tell the
PDF viewer how to decode the binary data.  Possible values are
'/DeviceGray', '/DeviceRGB', '/DeviceCYMK', '/CalGray', '/CalRGB',
'/Lab', '/ICCBased', '/DeviceN', '/Seperation', and '/Indexed'.
See the PDF specification for details.</p>
<p><code>bitspercolor</code> tells the PDF viewer how many bits
each color component uses.  The most common value is 8, although
all integers are legal.  The PDF viewer application will use this
value and the <code>colorspace</code> value to calculate how many
bits are used to define each pixel. For example, if the colorspace
is /DeviceCYMK and the bitspercolor is 4, then 16 bits define each
pixel (4 colors * 4 bits per color).</p>
<p><code>height</code> and <code>width</code> must describe the
height and width of the image in pixels.</p>
<p>The optional parameter <code>filter</code> is a string used to
determine what filter to use to decode the binary data. If omitted,
no filter is used. Note that if compression is enabled, then the
'/FlateDecode' filter is applied during the <code>->generate()</code>
process; thus it is not recommended to use /FlateDecode during this
part of the process.  Common values (for images) are '/LZWDecode',
'/RunLenghtDecode', '/DCTDecode', and '/CCITTFaxDecode'. See the
PDF spec for all possible values.</p>
<p><code>additional</code> is an array of additional entries for
the image dictionary. Common use of this could be to set the
<code>/DecodeParms</code> value.</p>
<p>The function returns a library ID that must be used
to paint the embedded image, or false on error.</p>
<h1>Examples</h1>
<p>The following creates a single-pixel image and embeds it</p>
<pre>
$data = "\xff\x00\x00";
$image = $pdf->image_raw_embed($data, '/DeviceRGB', 8, 1, 1);
$placement = $pdf->image_place($image, 10, 10, $page);
</pre>
<h1>See Also</h1>
<h1>History</h1>
<p>This function has been in the library longer than jfif_embed() but
was missing documentation until version 2.5.</p>
<p>The <code>additional</code> parameter was added in 2.5</p>
<h1>Bugs</h1>
<p>This method doesn't have near the sanity checking it could/should
have. It's perfectly possible to specify a number of bogus values
and this method would return successfully while creating a totally
invalid embedded image.</p>
<p>Some PDF viewers have problems displaying images in
certain formats. Before reporting bugs concerning images, ensure that
you are using the latest version of your PDF viewer program.  Also
be sure that the image is valid in the format that you are using.</p>
</BODY>
</HTML>
